import numpy as np
radius_estimates = [171, 171, 171, 171, 172, 172, 172, 172, 172, 173, 174, 175, 177, 178, 179, 178, 179, 179, 180, 181, 182, 184, 185, 186, 186, 187, 187, 188, 188, 189, 191, 193, 195, 196, 197, 198, 199, 201, 202, 204, 207, 215, 220, 228, 234, 238, 242, 243, 244, 245, 246, 246, 246, 246, 254, 255, 255, 255, 255, 255, 257, 258, 218, 217, 216, 216, 215, 215, 214, 214, 213, 212, 212, 211, 212, 215, 219, 226, 229, 232, 234, 234, 235, 235, 235, 235, 236, 236, 236, 236, 236, 236, 236, 235, 234, 234, 234, 233, 233, 232, 231, 230, 229, 228, 227, 225, 224, 224, 225, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 226, 226, 225, 225, 225, 224, 224, 223, 222, 222, 222, 222, 222, 222, 222, 221, 221, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 219, 219, 220, 219, 219, 218, 217, 218, 217, 218, 218, 218, 219, 218, 219, 219, 219, 220, 220, 221, 221, 222, 223, 224, 224, 225, 225, 226, 227, 228, 228, 229, 230, 230, 231, 232, 232, 233, 233, 233, 233, 233, 233, 234, 234, 234, 234, 234, 233, 234, 234, 235, 235, 235, 236, 236, 235, 235, 234, 233, 232, 231, 230, 229, 227, 224, 222, 221, 221, 220, 220, 220, 220, 221, 221, 222, 222, 222, 222, 222, 222, 154, 153, 152, 151, 150, 150, 150, 149, 149, 149, 149, 149, 150, 150, 151, 150, 151, 151, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 153, 153, 153, 153, 153, 153, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 156, 156, 157, 157, 158, 159, 160, 160, 161, 162, 162, 163, 163, 163, 164, 165, 166, 167, 168, 169, 170, 171, 171, 171, 173, 173, 173, 173, 173, 173, 175, 175, 175, 175, 175, 175, 177, 177, 178, 178, 180, 181, 182, 183, 184, 184, 185, 186, 186, 186, 187, 187, 189, 189, 190, 192, 194, 194, 196, 197, 198, 199, 199, 200, 201, 202, 203, 205, 206, 207, 207, 208, 208, 209, 209, 210, 210, 210, 211, 212, 215, 216, 217, 217, 218, 218, 219, 219, 220, 222, 224, 225, 227, 229, 229, 230, 230, 232, 232, 232, 233, 233, 235, 236, 239, 241, 245, 246, 247, 248, 248, 248, 250, 250, 250, 250, 252, 252, 253, 254, 256, 257, 257, 258, 258, 258, 259, 259, 260, 261, 264, 265, 265, 266, 266, 266, 267, 267, 268, 268, 268]

def check_occurances(list):
    avail_nums = []
    occurances = []
    paired_occurances = {}
    for num in list: 
        if num not in avail_nums: 
            avail_nums.append(num)
    for avail in avail_nums:
        occurances.append(list.count(avail))
    for (rad, occur) in zip(avail_nums, occurances):
        paired_occurances[rad]=occur
    #https://www.geeksforgeeks.org/sort-python-dictionary-by-value/
    sorted_paired_occurances = dict(sorted(paired_occurances.items(), 
                          key=lambda item: item[1]))
    return sorted_paired_occurances

def create_list (dict): 
    radius_estimates_sorted = []
    for key in dict: 
        times = dict[key]
        for x in range (times):
            radius_estimates_sorted.append(key)
    return radius_estimates_sorted

radius_estimates_occurances = check_occurances(radius_estimates)
radius_estimates_sorted = create_list(radius_estimates_occurances)
print(radius_estimates_sorted)
per = 0.3
length_from_end = int(len(radius_estimates_sorted) * (per*2))
radius_estimates_new = radius_estimates_sorted[-length_from_end:-1]
print(radius_estimates_new)
avg_new = np.average(radius_estimates_new)
avg = np.average(radius_estimates)

print(f"avg: {avg}  avg_new: {avg_new}")